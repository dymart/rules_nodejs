load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load(":defs.bzl", "my_nodejs")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary", "nodejs_test")

# Trivial test fixture: a nodejs program that writes to a file
write_file(
    name = "js",
    out = "some.js",
    content = ["require('fs').writeFileSync(process.argv[2], 'stuff')"],
)

write_file(
    name = "version",
    out = "version.js",
    content = ["require('fs').writeFileSync(process.argv[2], process.version)"],
)

write_file(
    name = "binary_version",
    out = "binary_version.js",
    content = ["console.log(process.version)"],
)

write_file(
    name = "write_expected",
    out = "expected",
    content = ["stuff"],
)

write_file(
    name = "write_node_version_15",
    out = "node_15",
    content = ["v15.14.0"],
)

write_file(
    name = "write_node_version_16",
    out = "node_16",
    content = ["v16.9.0"],
)

# Here, my_nodejs is a fake for something like nodejs_binary or
# some other custom rule that runs node.
my_nodejs(
    name = "run",
    out = "thing",
    entry_point = "some.js",
)

my_nodejs(
    name = "run_none",
    out = "thing_none",
    entry_point = "version.js",
)

# this tests to make sure that the first version imported in the workspace is used a default
diff_test(
    name = "test_node_version_default",
    file1 = "write_node_version_15",
    file2 = "thing_none",
)

my_nodejs(
    name = "run_15",
    out = "thing_15",
    entry_point = "version.js",
    toolchain = "@node15_linux_amd64//:node_toolchain",
)

diff_test(
    name = "test_node_version_15",
    file1 = "write_node_version_15",
    file2 = "thing_15",
)

my_nodejs(
    name = "run_16",
    out = "thing_16",
    entry_point = "version.js",
    toolchain = "@node16_linux_amd64//:node_toolchain",
)

diff_test(
    name = "test_node_version_16",
    file1 = "write_node_version_16",
    file2 = "thing_16",
)

# Assert that the node program wrote the file we expect
diff_test(
    name = "test_custom_rule",
    file1 = "expected",
    file2 = "thing",
)

# okay now allow this to take a toolchain as an input or just use the default
nodejs_binary(
    name = "main_15",
    entry_point = "binary_version.js",
    node = "@node15_linux_amd64//:node_toolchain",
)

nodejs_binary(
    name = "main_16",
    entry_point = "binary_version.js",
    node = "@node16_linux_amd64//:node_toolchain",
)

nodejs_test(
    name = "main_default_test",
    entry_point = "test_default.js",
)

nodejs_test(
    name = "main_15_test",
    entry_point = "test_v15.14.0.js",
    node = "@node15_linux_amd64//:node_toolchain",
)

nodejs_test(
    name = "main_16_test",
    entry_point = "test_v16.js",
    node = "@node16_linux_amd64//:node_toolchain",
)
